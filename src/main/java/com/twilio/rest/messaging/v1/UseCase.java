/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.messaging.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains beta products that are subject to
 * change. Use them with caution.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class UseCase extends Resource {
    private static final long serialVersionUID = 20637410328443L;

    /**
     * Create a UseCaseReader to execute read.
     *
     * @return UseCaseReader capable of executing the read
     */
    public static UseCaseReader reader() {
        return new UseCaseReader();
    }

    /**
     * Converts a JSON String into a UseCase object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return UseCase object represented by the provided JSON
     */
    public static UseCase fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, UseCase.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a UseCase object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return UseCase object represented by the provided JSON
     */
    public static UseCase fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, UseCase.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String name;
    private final String code;
    private final String description;

    @JsonCreator
    private UseCase(@JsonProperty("name")
                    final String name,
                    @JsonProperty("code")
                    final String code,
                    @JsonProperty("description")
                    final String description) {
        this.name = name;
        this.code = code;
        this.description = description;
    }

    /**
     * Returns Human readable name.
     *
     * @return Human readable name
     */
    public final String getName() {
        return this.name;
    }

    /**
     * Returns Unique Use Case code.
     *
     * @return Unique Use Case code
     */
    public final String getCode() {
        return this.code;
    }

    /**
     * Returns Description of Use Case.
     *
     * @return Description of Use Case
     */
    public final String getDescription() {
        return this.description;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        UseCase other = (UseCase) o;

        return Objects.equals(name, other.name) &&
               Objects.equals(code, other.code) &&
               Objects.equals(description, other.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name,
                            code,
                            description);
    }
}