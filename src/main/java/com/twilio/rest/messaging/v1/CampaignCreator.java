/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.messaging.v1;

import com.twilio.base.Creator;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.util.List;

/**
 * PLEASE NOTE that this class contains beta products that are subject to
 * change. Use them with caution.
 */
public class CampaignCreator extends Creator<Campaign> {
    private final String brandRegistrationSid;
    private final String useCase;
    private final String description;
    private final List<String> messageSamples;
    private final Boolean hasEmbeddedLinks;
    private final Boolean hasEmbeddedPhone;
    private final String messagingServiceSid;

    /**
     * Construct a new CampaignCreator.
     *
     * @param brandRegistrationSid A2P BrandRegistration Sid
     * @param useCase A2P Campaign UseCase.
     * @param description A short description of what this SMS campaign does
     * @param messageSamples Message samples
     * @param hasEmbeddedLinks Indicate that this SMS campaign will send messages
     *                         that contain links
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages
     *                         that contain phone numbers
     * @param messagingServiceSid MessagingService SID
     */
    public CampaignCreator(final String brandRegistrationSid,
                           final String useCase,
                           final String description,
                           final List<String> messageSamples,
                           final Boolean hasEmbeddedLinks,
                           final Boolean hasEmbeddedPhone,
                           final String messagingServiceSid) {
        this.brandRegistrationSid = brandRegistrationSid;
        this.useCase = useCase;
        this.description = description;
        this.messageSamples = messageSamples;
        this.hasEmbeddedLinks = hasEmbeddedLinks;
        this.hasEmbeddedPhone = hasEmbeddedPhone;
        this.messagingServiceSid = messagingServiceSid;
    }

    /**
     * Make the request to the Twilio API to perform the create.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Created Campaign
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Campaign create(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.MESSAGING.toString(),
            "/v1/a2p/Campaigns"
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Campaign creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return Campaign.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     *
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (brandRegistrationSid != null) {
            request.addPostParam("BrandRegistrationSid", brandRegistrationSid);
        }

        if (useCase != null) {
            request.addPostParam("UseCase", useCase);
        }

        if (description != null) {
            request.addPostParam("Description", description);
        }

        if (messageSamples != null) {
            for (String prop : messageSamples) {
                request.addPostParam("MessageSamples", prop);
            }
        }

        if (hasEmbeddedLinks != null) {
            request.addPostParam("HasEmbeddedLinks", hasEmbeddedLinks.toString());
        }

        if (hasEmbeddedPhone != null) {
            request.addPostParam("HasEmbeddedPhone", hasEmbeddedPhone.toString());
        }

        if (messagingServiceSid != null) {
            request.addPostParam("MessagingServiceSid", messagingServiceSid);
        }
    }
}